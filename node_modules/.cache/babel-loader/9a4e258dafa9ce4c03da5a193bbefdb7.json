{"ast":null,"code":"var _jsxFileName = \"/home/elice/react-portfolio-share-app/src/components/Portfolio.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport { UserStateContext } from \"../App\";\nimport * as Api from \"../api\";\nimport User from \"./user/User\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Portfolio() {\n  _s();\n\n  var _userState$user;\n\n  const navigate = useNavigate();\n  const params = useParams(); // useState 훅을 통해 portfolioOwner 상태를 생성함.\n\n  const [portfolioOwner, setPortfolioOwner] = useState(null); // fetchPorfolioOwner 함수가 완료된 이후에만 (isFetchCompleted가 true여야) 컴포넌트가 구현되도록 함.\n  // 아래 코드를 보면, isFetchCompleted가 false이면 \"loading...\"만 반환되어서, 화면에 이 로딩 문구만 뜨게 됨.\n\n  const [isFetchCompleted, setIsFetchCompleted] = useState(false);\n  const userState = useContext(UserStateContext);\n\n  const fetchPorfolioOwner = async ownerId => {\n    // 유저 id를 가지고 \"/users/유저id\" 엔드포인트로 요청해 사용자 정보를 불러옴.\n    const res = await Api.get(\"users\", ownerId); // 사용자 정보는 response의 data임.\n\n    const ownerData = res.data; // portfolioOwner을 해당 사용자 정보로 세팅함.\n\n    setPortfolioOwner(ownerData); // fetchPorfolioOwner 과정이 끝났으므로, isFetchCompleted를 true로 바꿈.\n\n    setIsFetchCompleted(true);\n  };\n\n  useEffect(() => {\n    // 전역 상태의 user가 null이라면 로그인이 안 된 상태이므로, 로그인 페이지로 돌림.\n    if (!userState.user) {\n      navigate(\"/login\", {\n        replace: true\n      });\n      return;\n    }\n\n    if (params.userId) {\n      // 만약 현재 URL이 \"/users/:userId\" 라면, 이 userId를 유저 id로 설정함.\n      const ownerId = params.userId; // 해당 유저 id로 fetchPorfolioOwner 함수를 실행함.\n\n      fetchPorfolioOwner(ownerId);\n    } else {\n      // 이외의 경우, 즉 URL이 \"/\" 라면, 전역 상태의 user.id를 유저 id로 설정함.\n      const ownerId = userState.user.id; // 해당 유저 id로 fetchPorfolioOwner 함수를 실행함.\n\n      fetchPorfolioOwner(ownerId);\n    }\n  }, [params, userState, navigate]);\n\n  if (!isFetchCompleted) {\n    return \"loading...\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: \"3\",\n        lg: \"3\",\n        children: /*#__PURE__*/_jsxDEV(User, {\n          portfolioOwnerId: portfolioOwner.id,\n          isEditable: portfolioOwner.id === ((_userState$user = userState.user) === null || _userState$user === void 0 ? void 0 : _userState$user.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: \"\\uD559\\uB825 \\uBAA9\\uB85D, \\uC218\\uC0C1\\uC774\\uB825 \\uBAA9\\uB85D, \\uD504\\uB85C\\uC81D\\uD2B8 \\uBAA9\\uB85D, \\uC790\\uACA9\\uC99D \\uBAA9\\uB85D \\uB9CC\\uB4E4\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Portfolio, \"ozN5wJsbZI17qb28PSn+j5/v+Ps=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = Portfolio;\nexport default Portfolio;\n\nvar _c;\n\n$RefreshReg$(_c, \"Portfolio\");","map":{"version":3,"sources":["/home/elice/react-portfolio-share-app/src/components/Portfolio.js"],"names":["React","useContext","useState","useEffect","useNavigate","useParams","Container","Col","Row","UserStateContext","Api","User","Portfolio","navigate","params","portfolioOwner","setPortfolioOwner","isFetchCompleted","setIsFetchCompleted","userState","fetchPorfolioOwner","ownerId","res","get","ownerData","data","user","replace","userId","id","textAlign"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AAEA,SAASC,gBAAT,QAAiC,QAAjC;AACA,OAAO,KAAKC,GAAZ,MAAqB,QAArB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AAAA;;AACnB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,MAAM,GAAGT,SAAS,EAAxB,CAFmB,CAGnB;;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAC,IAAD,CAApD,CAJmB,CAKnB;AACA;;AACA,QAAM,CAACe,gBAAD,EAAmBC,mBAAnB,IAA0ChB,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAMiB,SAAS,GAAGlB,UAAU,CAACQ,gBAAD,CAA5B;;AAEA,QAAMW,kBAAkB,GAAG,MAAOC,OAAP,IAAmB;AAC5C;AACA,UAAMC,GAAG,GAAG,MAAMZ,GAAG,CAACa,GAAJ,CAAQ,OAAR,EAAiBF,OAAjB,CAAlB,CAF4C,CAG5C;;AACA,UAAMG,SAAS,GAAGF,GAAG,CAACG,IAAtB,CAJ4C,CAK5C;;AACAT,IAAAA,iBAAiB,CAACQ,SAAD,CAAjB,CAN4C,CAO5C;;AACAN,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,GATD;;AAWAf,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACgB,SAAS,CAACO,IAAf,EAAqB;AACnBb,MAAAA,QAAQ,CAAC,QAAD,EAAW;AAAEc,QAAAA,OAAO,EAAE;AAAX,OAAX,CAAR;AACA;AACD;;AAED,QAAIb,MAAM,CAACc,MAAX,EAAmB;AACjB;AACA,YAAMP,OAAO,GAAGP,MAAM,CAACc,MAAvB,CAFiB,CAGjB;;AACAR,MAAAA,kBAAkB,CAACC,OAAD,CAAlB;AACD,KALD,MAKO;AACL;AACA,YAAMA,OAAO,GAAGF,SAAS,CAACO,IAAV,CAAeG,EAA/B,CAFK,CAGL;;AACAT,MAAAA,kBAAkB,CAACC,OAAD,CAAlB;AACD;AACF,GAlBQ,EAkBN,CAACP,MAAD,EAASK,SAAT,EAAoBN,QAApB,CAlBM,CAAT;;AAoBA,MAAI,CAACI,gBAAL,EAAuB;AACrB,WAAO,YAAP;AACD;;AAED,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAA,2BACE,QAAC,GAAD;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAC,GAAR;AAAY,QAAA,EAAE,EAAC,GAAf;AAAA,+BACE,QAAC,IAAD;AACE,UAAA,gBAAgB,EAAEF,cAAc,CAACc,EADnC;AAEE,UAAA,UAAU,EAAEd,cAAc,CAACc,EAAf,yBAAsBV,SAAS,CAACO,IAAhC,oDAAsB,gBAAgBG,EAAtC;AAFd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE,QAAC,GAAD;AAAA,+BAEE;AAAK,UAAA,KAAK,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GAhEQlB,S;UACUR,W,EACFC,S;;;KAFRO,S;AAkET,eAAeA,SAAf","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Container, Col, Row } from \"react-bootstrap\";\n\nimport { UserStateContext } from \"../App\";\nimport * as Api from \"../api\";\nimport User from \"./user/User\";\n\nfunction Portfolio() {\n  const navigate = useNavigate();\n  const params = useParams();\n  // useState 훅을 통해 portfolioOwner 상태를 생성함.\n  const [portfolioOwner, setPortfolioOwner] = useState(null);\n  // fetchPorfolioOwner 함수가 완료된 이후에만 (isFetchCompleted가 true여야) 컴포넌트가 구현되도록 함.\n  // 아래 코드를 보면, isFetchCompleted가 false이면 \"loading...\"만 반환되어서, 화면에 이 로딩 문구만 뜨게 됨.\n  const [isFetchCompleted, setIsFetchCompleted] = useState(false);\n  const userState = useContext(UserStateContext);\n\n  const fetchPorfolioOwner = async (ownerId) => {\n    // 유저 id를 가지고 \"/users/유저id\" 엔드포인트로 요청해 사용자 정보를 불러옴.\n    const res = await Api.get(\"users\", ownerId);\n    // 사용자 정보는 response의 data임.\n    const ownerData = res.data;\n    // portfolioOwner을 해당 사용자 정보로 세팅함.\n    setPortfolioOwner(ownerData);\n    // fetchPorfolioOwner 과정이 끝났으므로, isFetchCompleted를 true로 바꿈.\n    setIsFetchCompleted(true);\n  };\n\n  useEffect(() => {\n    // 전역 상태의 user가 null이라면 로그인이 안 된 상태이므로, 로그인 페이지로 돌림.\n    if (!userState.user) {\n      navigate(\"/login\", { replace: true });\n      return;\n    }\n\n    if (params.userId) {\n      // 만약 현재 URL이 \"/users/:userId\" 라면, 이 userId를 유저 id로 설정함.\n      const ownerId = params.userId;\n      // 해당 유저 id로 fetchPorfolioOwner 함수를 실행함.\n      fetchPorfolioOwner(ownerId);\n    } else {\n      // 이외의 경우, 즉 URL이 \"/\" 라면, 전역 상태의 user.id를 유저 id로 설정함.\n      const ownerId = userState.user.id;\n      // 해당 유저 id로 fetchPorfolioOwner 함수를 실행함.\n      fetchPorfolioOwner(ownerId);\n    }\n  }, [params, userState, navigate]);\n\n  if (!isFetchCompleted) {\n    return \"loading...\";\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col md=\"3\" lg=\"3\">\n          <User\n            portfolioOwnerId={portfolioOwner.id}\n            isEditable={portfolioOwner.id === userState.user?.id}\n          />\n        </Col>\n        <Col>\n\n          <div style={{ textAlign: \"center\" }}>\n            학력 목록, 수상이력 목록, 프로젝트 목록, 자격증 목록 만들기\n          </div>\n\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Portfolio;\n"]},"metadata":{},"sourceType":"module"}