{"ast":null,"code":"import _asyncToGenerator from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState,useEffect,useReducer,createContext}from\"react\";import{BrowserRouter as Router,Routes,Route}from\"react-router-dom\";import*as Api from\"./api\";import{loginReducer}from\"./reducer\";import Header from\"./components/Header\";import LoginForm from\"./components/user/LoginForm\";import Network from\"./components/user/Network\";import RegisterForm from\"./components/user/RegisterForm\";import Portfolio from\"./components/Portfolio\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var UserStateContext=/*#__PURE__*/createContext(null);export var DispatchContext=/*#__PURE__*/createContext(null);function App(){// useReducer 훅을 통해 userState 상태와 dispatch함수를 생성함.\nvar _useReducer=useReducer(loginReducer,{user:null}),_useReducer2=_slicedToArray(_useReducer,2),userState=_useReducer2[0],dispatch=_useReducer2[1];// 아래의 fetchCurrentUser 함수가 실행된 다음에 컴포넌트가 구현되도록 함.\n// 아래 코드를 보면 isFetchCompleted 가 true여야 컴포넌트가 구현됨.\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isFetchCompleted=_useState2[0],setIsFetchCompleted=_useState2[1];var fetchCurrentUser=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res,currentUser;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return Api.get(\"user/current\");case 3:res=_context.sent;currentUser=res.data;// dispatch 함수를 통해 로그인 성공 상태로 만듦.\ndispatch({type:\"LOGIN_SUCCESS\",payload:currentUser});console.log(\"%c sessionStorage에 토큰 있음.\",\"color: #d93d1a;\");_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.log(\"%c SessionStorage에 토큰 없음.\",\"color: #d93d1a;\");case 12:// fetchCurrentUser 과정이 끝났으므로, isFetchCompleted 상태를 true로 바꿔줌\nsetIsFetchCompleted(true);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function fetchCurrentUser(){return _ref.apply(this,arguments);};}();// useEffect함수를 통해 fetchCurrentUser 함수를 실행함.\nuseEffect(function(){fetchCurrentUser();},[]);if(!isFetchCompleted){return\"loading...\";}return/*#__PURE__*/_jsx(DispatchContext.Provider,{value:dispatch,children:/*#__PURE__*/_jsx(UserStateContext.Provider,{value:userState,children:/*#__PURE__*/_jsxs(Router,{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",exact:true,element:/*#__PURE__*/_jsx(Portfolio,{})}),/*#__PURE__*/_jsx(Route,{path:\"/login\",element:/*#__PURE__*/_jsx(LoginForm,{})}),/*#__PURE__*/_jsx(Route,{path:\"/register\",element:/*#__PURE__*/_jsx(RegisterForm,{})}),/*#__PURE__*/_jsx(Route,{path:\"/users/:userId\",element:/*#__PURE__*/_jsx(Portfolio,{})}),/*#__PURE__*/_jsx(Route,{path:\"/network\",element:/*#__PURE__*/_jsx(Network,{})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(Portfolio,{})})]})]})})});}export default App;","map":{"version":3,"sources":["/home/elice/react-portfolio-share-app/src/App.js"],"names":["React","useState","useEffect","useReducer","createContext","BrowserRouter","Router","Routes","Route","Api","loginReducer","Header","LoginForm","Network","RegisterForm","Portfolio","UserStateContext","DispatchContext","App","user","userState","dispatch","isFetchCompleted","setIsFetchCompleted","fetchCurrentUser","get","res","currentUser","data","type","payload","console","log"],"mappings":"oXAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,UAArC,CAAiDC,aAAjD,KAAsE,OAAtE,CACA,OAASC,aAAa,GAAIC,CAAAA,MAA1B,CAAkCC,MAAlC,CAA0CC,KAA1C,KAAuD,kBAAvD,CAEA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,OAArB,CACA,OAASC,YAAT,KAA6B,WAA7B,CAEA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,SAAP,KAAsB,6BAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,2BAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,C,wFAEA,MAAO,IAAMC,CAAAA,gBAAgB,cAAGZ,aAAa,CAAC,IAAD,CAAtC,CACP,MAAO,IAAMa,CAAAA,eAAe,cAAGb,aAAa,CAAC,IAAD,CAArC,CAEP,QAASc,CAAAA,GAAT,EAAe,CACb;AACA,gBAA8Bf,UAAU,CAACO,YAAD,CAAe,CACrDS,IAAI,CAAE,IAD+C,CAAf,CAAxC,4CAAOC,SAAP,iBAAkBC,QAAlB,iBAIA;AACA;AACA,cAAgDpB,QAAQ,CAAC,KAAD,CAAxD,wCAAOqB,gBAAP,eAAyBC,mBAAzB,eAEA,GAAMC,CAAAA,gBAAgB,0FAAG,6LAGHf,CAAAA,GAAG,CAACgB,GAAJ,CAAQ,cAAR,CAHG,QAGfC,GAHe,eAIfC,WAJe,CAIDD,GAAG,CAACE,IAJH,CAMrB;AACAP,QAAQ,CAAC,CACPQ,IAAI,CAAE,eADC,CAEPC,OAAO,CAAEH,WAFF,CAAD,CAAR,CAKAI,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAAyC,iBAAzC,EAZqB,+EAcrBD,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAAyC,iBAAzC,EAdqB,QAgBvB;AACAT,mBAAmB,CAAC,IAAD,CAAnB,CAjBuB,oEAAH,kBAAhBC,CAAAA,gBAAgB,0CAAtB,CAoBA;AACAtB,SAAS,CAAC,UAAM,CACdsB,gBAAgB,GACjB,CAFQ,CAEN,EAFM,CAAT,CAIA,GAAI,CAACF,gBAAL,CAAuB,CACrB,MAAO,YAAP,CACD,CAED,mBACE,KAAC,eAAD,CAAiB,QAAjB,EAA0B,KAAK,CAAED,QAAjC,uBACE,KAAC,gBAAD,CAAkB,QAAlB,EAA2B,KAAK,CAAED,SAAlC,uBACE,MAAC,MAAD,yBACE,KAAC,MAAD,IADF,cAEE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,KAAK,KAArB,CAAsB,OAAO,cAAE,KAAC,SAAD,IAA/B,EADF,cAEE,KAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,CAAqB,OAAO,cAAE,KAAC,SAAD,IAA9B,EAFF,cAGE,KAAC,KAAD,EAAO,IAAI,CAAC,WAAZ,CAAwB,OAAO,cAAE,KAAC,YAAD,IAAjC,EAHF,cAIE,KAAC,KAAD,EAAO,IAAI,CAAC,gBAAZ,CAA6B,OAAO,cAAE,KAAC,SAAD,IAAtC,EAJF,cAKE,KAAC,KAAD,EAAO,IAAI,CAAC,UAAZ,CAAuB,OAAO,cAAE,KAAC,OAAD,IAAhC,EALF,cAME,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,OAAO,cAAE,KAAC,SAAD,IAAzB,EANF,GAFF,GADF,EADF,EADF,CAiBD,CAED,cAAeF,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect, useReducer, createContext } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nimport * as Api from \"./api\";\nimport { loginReducer } from \"./reducer\";\n\nimport Header from \"./components/Header\";\nimport LoginForm from \"./components/user/LoginForm\";\nimport Network from \"./components/user/Network\";\nimport RegisterForm from \"./components/user/RegisterForm\";\nimport Portfolio from \"./components/Portfolio\";\n\nexport const UserStateContext = createContext(null);\nexport const DispatchContext = createContext(null);\n\nfunction App() {\n  // useReducer 훅을 통해 userState 상태와 dispatch함수를 생성함.\n  const [userState, dispatch] = useReducer(loginReducer, {\n    user: null,\n  });\n\n  // 아래의 fetchCurrentUser 함수가 실행된 다음에 컴포넌트가 구현되도록 함.\n  // 아래 코드를 보면 isFetchCompleted 가 true여야 컴포넌트가 구현됨.\n  const [isFetchCompleted, setIsFetchCompleted] = useState(false);\n\n  const fetchCurrentUser = async () => {\n    try {\n      // 이전에 발급받은 토큰이 있다면, 이를 가지고 유저 정보를 받아옴.\n      const res = await Api.get(\"user/current\");\n      const currentUser = res.data;\n\n      // dispatch 함수를 통해 로그인 성공 상태로 만듦.\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: currentUser,\n      });\n\n      console.log(\"%c sessionStorage에 토큰 있음.\", \"color: #d93d1a;\");\n    } catch {\n      console.log(\"%c SessionStorage에 토큰 없음.\", \"color: #d93d1a;\");\n    }\n    // fetchCurrentUser 과정이 끝났으므로, isFetchCompleted 상태를 true로 바꿔줌\n    setIsFetchCompleted(true);\n  };\n\n  // useEffect함수를 통해 fetchCurrentUser 함수를 실행함.\n  useEffect(() => {\n    fetchCurrentUser();\n  }, []);\n\n  if (!isFetchCompleted) {\n    return \"loading...\";\n  }\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <UserStateContext.Provider value={userState}>\n        <Router>\n          <Header />\n          <Routes>\n            <Route path=\"/\" exact element={<Portfolio />} />\n            <Route path=\"/login\" element={<LoginForm />} />\n            <Route path=\"/register\" element={<RegisterForm />} />\n            <Route path=\"/users/:userId\" element={<Portfolio />} />\n            <Route path=\"/network\" element={<Network />} />\n            <Route path=\"*\" element={<Portfolio />} />\n          </Routes>\n        </Router>\n      </UserStateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}