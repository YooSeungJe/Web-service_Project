{"ast":null,"code":"import _slicedToArray from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import UserEditForm from\"./UserEditForm\";import UserCard from\"./UserCard\";import*as Api from\"../../api\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function User(_ref){var portfolioOwnerId=_ref.portfolioOwnerId,isEditable=_ref.isEditable;// useState 훅을 통해 isEditing 상태를 생성함.\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isEditing=_useState2[0],setIsEditing=_useState2[1];// useState 훅을 통해 user 상태를 생성함.\nvar _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),user=_useState4[0],setUser=_useState4[1];useEffect(function(){// \"users/유저id\" 엔드포인트로 GET 요청을 하고, user를 response의 data로 세팅함.\nApi.get(\"users\",portfolioOwnerId).then(function(res){return setUser(res.data);});},[portfolioOwnerId]);return/*#__PURE__*/_jsx(_Fragment,{children:isEditing?/*#__PURE__*/_jsx(UserEditForm,{user:user,setIsEditing:setIsEditing,setUser:setUser}):/*#__PURE__*/_jsx(UserCard,{user:user,setIsEditing:setIsEditing,isEditable:isEditable})});}export default User;","map":{"version":3,"sources":["/home/elice/react-portfolio-share-app/src/components/user/User.js"],"names":["React","useState","useEffect","UserEditForm","UserCard","Api","User","portfolioOwnerId","isEditable","isEditing","setIsEditing","user","setUser","get","then","res","data"],"mappings":"2HAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,WAArB,C,gGAEA,QAASC,CAAAA,IAAT,MAAgD,IAAhCC,CAAAA,gBAAgC,MAAhCA,gBAAgC,CAAdC,UAAc,MAAdA,UAAc,CAC9C;AACA,cAAkCP,QAAQ,CAAC,KAAD,CAA1C,wCAAOQ,SAAP,eAAkBC,YAAlB,eACA;AACA,eAAwBT,QAAQ,CAAC,IAAD,CAAhC,yCAAOU,IAAP,eAAaC,OAAb,eAEAV,SAAS,CAAC,UAAM,CACd;AACAG,GAAG,CAACQ,GAAJ,CAAQ,OAAR,CAAiBN,gBAAjB,EAAmCO,IAAnC,CAAwC,SAACC,GAAD,QAASH,CAAAA,OAAO,CAACG,GAAG,CAACC,IAAL,CAAhB,EAAxC,EACD,CAHQ,CAGN,CAACT,gBAAD,CAHM,CAAT,CAKA,mBACE,yBACGE,SAAS,cACR,KAAC,YAAD,EACE,IAAI,CAAEE,IADR,CAEE,YAAY,CAAED,YAFhB,CAGE,OAAO,CAAEE,OAHX,EADQ,cAOR,KAAC,QAAD,EACE,IAAI,CAAED,IADR,CAEE,YAAY,CAAED,YAFhB,CAGE,UAAU,CAAEF,UAHd,EARJ,EADF,CAiBD,CAED,cAAeF,CAAAA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport UserEditForm from \"./UserEditForm\";\nimport UserCard from \"./UserCard\";\nimport * as Api from \"../../api\";\n\nfunction User({ portfolioOwnerId, isEditable }) {\n  // useState 훅을 통해 isEditing 상태를 생성함.\n  const [isEditing, setIsEditing] = useState(false);\n  // useState 훅을 통해 user 상태를 생성함.\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // \"users/유저id\" 엔드포인트로 GET 요청을 하고, user를 response의 data로 세팅함.\n    Api.get(\"users\", portfolioOwnerId).then((res) => setUser(res.data));\n  }, [portfolioOwnerId]);\n\n  return (\n    <>\n      {isEditing ? (\n        <UserEditForm\n          user={user}\n          setIsEditing={setIsEditing}\n          setUser={setUser}\n        />\n      ) : (\n        <UserCard\n          user={user}\n          setIsEditing={setIsEditing}\n          isEditable={isEditable}\n        />\n      )}\n    </>\n  );\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}