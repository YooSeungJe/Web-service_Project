{"ast":null,"code":"import _asyncToGenerator from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState,useContext}from\"react\";import{useNavigate}from\"react-router-dom\";import{Container,Col,Row,Form,Button}from\"react-bootstrap\";import*as Api from\"../../api\";import{DispatchContext}from\"../../App\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function LoginForm(){var navigate=useNavigate();var dispatch=useContext(DispatchContext);//useState로 email 상태를 생성함.\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),email=_useState2[0],setEmail=_useState2[1];//useState로 password 상태를 생성함.\nvar _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),password=_useState4[0],setPassword=_useState4[1];//이메일이 abc@example.com 형태인지 regex를 이용해 확인함.\nvar validateEmail=function validateEmail(email){return email.toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);};//위 validateEmail 함수를 통해 이메일 형태 적합 여부를 확인함.\nvar isEmailValid=validateEmail(email);// 비밀번호가 4글자 이상인지 여부를 확인함.\nvar isPasswordValid=password.length>=4;//\n// 이메일과 비밀번호 조건이 동시에 만족되는지 확인함.\nvar isFormValid=isEmailValid&&isPasswordValid;var handleSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var res,user,jwtToken;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();_context.prev=1;_context.next=4;return Api.post(\"user/login\",{email:email,password:password});case 4:res=_context.sent;// 유저 정보는 response의 data임.\nuser=res.data;// JWT 토큰은 유저 정보의 token임.\njwtToken=user.token;// sessionStorage에 \"userToken\"이라는 키로 JWT 토큰을 저장함.\nsessionStorage.setItem(\"userToken\",jwtToken);// dispatch 함수를 이용해 로그인 성공 상태로 만듦.\ndispatch({type:\"LOGIN_SUCCESS\",payload:user});// 기본 페이지로 이동함.\nnavigate(\"/\",{replace:true});_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](1);console.log(\"로그인에 실패하였습니다.\\n\",_context.t0);case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,12]]);}));return function handleSubmit(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsx(Row,{className:\"justify-content-md-center mt-5\",children:/*#__PURE__*/_jsx(Col,{lg:8,children:/*#__PURE__*/_jsxs(Form,{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(Form.Group,{controlId:\"loginEmail\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"email\",autoComplete:\"on\",value:email,onChange:function onChange(e){return setEmail(e.target.value);}}),!isEmailValid&&/*#__PURE__*/_jsx(Form.Text,{className:\"text-success\",children:\"\\uC774\\uBA54\\uC77C \\uD615\\uC2DD\\uC774 \\uC62C\\uBC14\\uB974\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"})]}),/*#__PURE__*/_jsxs(Form.Group,{controlId:\"loginPassword\",className:\"mt-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uBE44\\uBC00\\uBC88\\uD638\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",autoComplete:\"on\",value:password,onChange:function onChange(e){return setPassword(e.target.value);}}),!isPasswordValid&&/*#__PURE__*/_jsx(Form.Text,{className:\"text-success\",children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 4\\uAE00\\uC790 \\uC774\\uC0C1\\uC785\\uB2C8\\uB2E4.\"})]}),/*#__PURE__*/_jsx(Form.Group,{as:Row,className:\"mt-3 text-center\",children:/*#__PURE__*/_jsx(Col,{sm:{span:20},children:/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",disabled:!isFormValid,children:\"\\uB85C\\uADF8\\uC778\"})})}),/*#__PURE__*/_jsx(Form.Group,{as:Row,className:\"mt-3 text-center\",children:/*#__PURE__*/_jsx(Col,{sm:{span:20},children:/*#__PURE__*/_jsx(Button,{variant:\"light\",onClick:function onClick(){return navigate(\"/register\");},children:\"\\uD68C\\uC6D0\\uAC00\\uC785\\uD558\\uAE30\"})})})]})})})});}export default LoginForm;","map":{"version":3,"sources":["/home/elice/react-portfolio-share-app/src/components/user/LoginForm.js"],"names":["React","useState","useContext","useNavigate","Container","Col","Row","Form","Button","Api","DispatchContext","LoginForm","navigate","dispatch","email","setEmail","password","setPassword","validateEmail","toLowerCase","match","isEmailValid","isPasswordValid","length","isFormValid","handleSubmit","e","preventDefault","post","res","user","data","jwtToken","token","sessionStorage","setItem","type","payload","replace","console","log","target","value","span"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Container, Col, Row, Form, Button } from \"react-bootstrap\";\n\nimport * as Api from \"../../api\";\nimport { DispatchContext } from \"../../App\";\n\nfunction LoginForm() {\n  const navigate = useNavigate();\n  const dispatch = useContext(DispatchContext);\n\n  //useState로 email 상태를 생성함.\n  const [email, setEmail] = useState(\"\");\n  //useState로 password 상태를 생성함.\n  const [password, setPassword] = useState(\"\");\n\n  //이메일이 abc@example.com 형태인지 regex를 이용해 확인함.\n  const validateEmail = (email) => {\n    return email\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n  };\n\n  //위 validateEmail 함수를 통해 이메일 형태 적합 여부를 확인함.\n  const isEmailValid = validateEmail(email);\n  // 비밀번호가 4글자 이상인지 여부를 확인함.\n  const isPasswordValid = password.length >= 4;\n  //\n  // 이메일과 비밀번호 조건이 동시에 만족되는지 확인함.\n  const isFormValid = isEmailValid && isPasswordValid;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      // \"user/login\" 엔드포인트로 post요청함.\n      const res = await Api.post(\"user/login\", {\n        email,\n        password,\n      });\n      // 유저 정보는 response의 data임.\n      const user = res.data;\n      // JWT 토큰은 유저 정보의 token임.\n      const jwtToken = user.token;\n      // sessionStorage에 \"userToken\"이라는 키로 JWT 토큰을 저장함.\n      sessionStorage.setItem(\"userToken\", jwtToken);\n      // dispatch 함수를 이용해 로그인 성공 상태로 만듦.\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: user,\n      });\n\n      // 기본 페이지로 이동함.\n      navigate(\"/\", { replace: true });\n    } catch (err) {\n      console.log(\"로그인에 실패하였습니다.\\n\", err);\n    }\n  };\n\n  return (\n    <Container>\n      <Row className=\"justify-content-md-center mt-5\">\n        <Col lg={8}>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"loginEmail\">\n              <Form.Label>이메일 주소</Form.Label>\n              <Form.Control\n                type=\"email\"\n                autoComplete=\"on\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              {!isEmailValid && (\n                <Form.Text className=\"text-success\">\n                  이메일 형식이 올바르지 않습니다.\n                </Form.Text>\n              )}\n            </Form.Group>\n\n            <Form.Group controlId=\"loginPassword\" className=\"mt-3\">\n              <Form.Label>비밀번호</Form.Label>\n              <Form.Control\n                type=\"password\"\n                autoComplete=\"on\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              {!isPasswordValid && (\n                <Form.Text className=\"text-success\">\n                  비밀번호는 4글자 이상입니다.\n                </Form.Text>\n              )}\n            </Form.Group>\n\n            <Form.Group as={Row} className=\"mt-3 text-center\">\n              <Col sm={{ span: 20 }}>\n                <Button variant=\"primary\" type=\"submit\" disabled={!isFormValid}>\n                  로그인\n                </Button>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} className=\"mt-3 text-center\">\n              <Col sm={{ span: 20 }}>\n                <Button variant=\"light\" onClick={() => navigate(\"/register\")}>\n                  회원가입하기\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}