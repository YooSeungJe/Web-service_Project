{"ast":null,"code":"import _asyncToGenerator from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState}from\"react\";import{useNavigate}from\"react-router-dom\";import{Container,Col,Row,Form,Button}from\"react-bootstrap\";import*as Api from\"../../api\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function RegisterForm(){var navigate=useNavigate();//useState로 email 상태를 생성함.\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),email=_useState2[0],setEmail=_useState2[1];//useState로 password 상태를 생성함.\nvar _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),password=_useState4[0],setPassword=_useState4[1];//useState로 confirmPassword 상태를 생성함.\nvar _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),confirmPassword=_useState6[0],setConfirmPassword=_useState6[1];//useState로 name 상태를 생성함.\nvar _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),name=_useState8[0],setName=_useState8[1];//이메일이 abc@example.com 형태인지 regex를 이용해 확인함.\nvar validateEmail=function validateEmail(email){return email.toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);};//위 validateEmail 함수를 통해 이메일 형태 적합 여부를 확인함.\nvar isEmailValid=validateEmail(email);// 비밀번호가 4글자 이상인지 여부를 확인함.\nvar isPasswordValid=password.length>=4;// 비밀번호와 확인용 비밀번호가 일치하는지 여부를 확인함.\nvar isPasswordSame=password===confirmPassword;// 이름이 2글자 이상인지 여부를 확인함.\nvar isNameValid=name.length>=2;// 위 4개 조건이 모두 동시에 만족되는지 여부를 확인함.\nvar isFormValid=isEmailValid&&isPasswordValid&&isPasswordSame&&isNameValid;var handleSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();_context.prev=1;_context.next=4;return Api.post(\"user/register\",{email:email,password:password,name:name});case 4:// 로그인 페이지로 이동함.\nnavigate(\"/login\");_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](1);console.log(\"회원가입에 실패하였습니다.\",_context.t0);case 10:case\"end\":return _context.stop();}}},_callee,null,[[1,7]]);}));return function handleSubmit(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsx(Row,{className:\"justify-content-md-center mt-5\",children:/*#__PURE__*/_jsx(Col,{lg:8,children:/*#__PURE__*/_jsxs(Form,{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(Form.Group,{controlId:\"registerEmail\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"email\",autoComplete:\"off\",value:email,onChange:function onChange(e){return setEmail(e.target.value);}}),!isEmailValid&&/*#__PURE__*/_jsx(Form.Text,{className:\"text-success\",children:\"\\uC774\\uBA54\\uC77C \\uD615\\uC2DD\\uC774 \\uC62C\\uBC14\\uB974\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"})]}),/*#__PURE__*/_jsxs(Form.Group,{controlId:\"registerPassword\",className:\"mt-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uBE44\\uBC00\\uBC88\\uD638\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",autoComplete:\"off\",value:password,onChange:function onChange(e){return setPassword(e.target.value);}}),!isPasswordValid&&/*#__PURE__*/_jsx(Form.Text,{className:\"text-success\",children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 4\\uAE00\\uC790 \\uC774\\uC0C1\\uC73C\\uB85C \\uC124\\uC815\\uD574 \\uC8FC\\uC138\\uC694.\"})]}),/*#__PURE__*/_jsxs(Form.Group,{controlId:\"registerConfirmPassword\",className:\"mt-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uC7AC\\uD655\\uC778\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",autoComplete:\"off\",value:confirmPassword,onChange:function onChange(e){return setConfirmPassword(e.target.value);}}),!isPasswordSame&&/*#__PURE__*/_jsx(Form.Text,{className:\"text-success\",children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"})]}),/*#__PURE__*/_jsxs(Form.Group,{controlId:\"registerName\",className:\"mt-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"\\uC774\\uB984\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",autoComplete:\"off\",value:name,onChange:function onChange(e){return setName(e.target.value);}}),!isNameValid&&/*#__PURE__*/_jsx(Form.Text,{className:\"text-success\",children:\"\\uC774\\uB984\\uC740 2\\uAE00\\uC790 \\uC774\\uC0C1\\uC73C\\uB85C \\uC124\\uC815\\uD574 \\uC8FC\\uC138\\uC694.\"})]}),/*#__PURE__*/_jsx(Form.Group,{as:Row,className:\"mt-3 text-center\",children:/*#__PURE__*/_jsx(Col,{sm:{span:20},children:/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",disabled:!isFormValid,children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"})})}),/*#__PURE__*/_jsx(Form.Group,{as:Row,className:\"mt-3 text-center\",children:/*#__PURE__*/_jsx(Col,{sm:{span:20},children:/*#__PURE__*/_jsx(Button,{variant:\"light\",onClick:function onClick(){return navigate(\"/login\");},children:\"\\uB85C\\uADF8\\uC778\\uD558\\uAE30\"})})})]})})})});}export default RegisterForm;","map":{"version":3,"sources":["/home/elice/react-portfolio-share-app/src/components/user/RegisterForm.js"],"names":["React","useState","useNavigate","Container","Col","Row","Form","Button","Api","RegisterForm","navigate","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","name","setName","validateEmail","toLowerCase","match","isEmailValid","isPasswordValid","length","isPasswordSame","isNameValid","isFormValid","handleSubmit","e","preventDefault","post","console","log","target","value","span"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Container, Col, Row, Form, Button } from \"react-bootstrap\";\n\nimport * as Api from \"../../api\";\n\nfunction RegisterForm() {\n  const navigate = useNavigate();\n\n  //useState로 email 상태를 생성함.\n  const [email, setEmail] = useState(\"\");\n  //useState로 password 상태를 생성함.\n  const [password, setPassword] = useState(\"\");\n  //useState로 confirmPassword 상태를 생성함.\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  //useState로 name 상태를 생성함.\n  const [name, setName] = useState(\"\");\n\n  //이메일이 abc@example.com 형태인지 regex를 이용해 확인함.\n  const validateEmail = (email) => {\n    return email\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n  };\n\n  //위 validateEmail 함수를 통해 이메일 형태 적합 여부를 확인함.\n  const isEmailValid = validateEmail(email);\n  // 비밀번호가 4글자 이상인지 여부를 확인함.\n  const isPasswordValid = password.length >= 4;\n  // 비밀번호와 확인용 비밀번호가 일치하는지 여부를 확인함.\n  const isPasswordSame = password === confirmPassword;\n  // 이름이 2글자 이상인지 여부를 확인함.\n  const isNameValid = name.length >= 2;\n\n  // 위 4개 조건이 모두 동시에 만족되는지 여부를 확인함.\n  const isFormValid =\n    isEmailValid && isPasswordValid && isPasswordSame && isNameValid;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      // \"user/register\" 엔드포인트로 post요청함.\n      await Api.post(\"user/register\", {\n        email,\n        password,\n        name,\n      });\n\n      // 로그인 페이지로 이동함.\n      navigate(\"/login\");\n    } catch (err) {\n      console.log(\"회원가입에 실패하였습니다.\", err);\n    }\n  };\n\n  return (\n    <Container>\n      <Row className=\"justify-content-md-center mt-5\">\n        <Col lg={8}>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"registerEmail\">\n              <Form.Label>이메일 주소</Form.Label>\n              <Form.Control\n                type=\"email\"\n                autoComplete=\"off\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              {!isEmailValid && (\n                <Form.Text className=\"text-success\">\n                  이메일 형식이 올바르지 않습니다.\n                </Form.Text>\n              )}\n            </Form.Group>\n\n            <Form.Group controlId=\"registerPassword\" className=\"mt-3\">\n              <Form.Label>비밀번호</Form.Label>\n              <Form.Control\n                type=\"password\"\n                autoComplete=\"off\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              {!isPasswordValid && (\n                <Form.Text className=\"text-success\">\n                  비밀번호는 4글자 이상으로 설정해 주세요.\n                </Form.Text>\n              )}\n            </Form.Group>\n\n            <Form.Group controlId=\"registerConfirmPassword\" className=\"mt-3\">\n              <Form.Label>비밀번호 재확인</Form.Label>\n              <Form.Control\n                type=\"password\"\n                autoComplete=\"off\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n              />\n              {!isPasswordSame && (\n                <Form.Text className=\"text-success\">\n                  비밀번호가 일치하지 않습니다.\n                </Form.Text>\n              )}\n            </Form.Group>\n\n            <Form.Group controlId=\"registerName\" className=\"mt-3\">\n              <Form.Label>이름</Form.Label>\n              <Form.Control\n                type=\"text\"\n                autoComplete=\"off\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n              {!isNameValid && (\n                <Form.Text className=\"text-success\">\n                  이름은 2글자 이상으로 설정해 주세요.\n                </Form.Text>\n              )}\n            </Form.Group>\n\n            <Form.Group as={Row} className=\"mt-3 text-center\">\n              <Col sm={{ span: 20 }}>\n                <Button variant=\"primary\" type=\"submit\" disabled={!isFormValid}>\n                  회원가입\n                </Button>\n              </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} className=\"mt-3 text-center\">\n              <Col sm={{ span: 20 }}>\n                <Button variant=\"light\" onClick={() => navigate(\"/login\")}>\n                  로그인하기\n                </Button>\n              </Col>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}