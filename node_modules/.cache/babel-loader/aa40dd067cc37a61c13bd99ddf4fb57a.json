{"ast":null,"code":"import _asyncToGenerator from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/home/elice/react-portfolio-share-app/node_modules/@babel/runtime/regenerator/index.js\";import React,{useContext,useState,useEffect}from\"react\";import{useNavigate,useParams}from\"react-router-dom\";import{Container,Col,Row}from\"react-bootstrap\";import{UserStateContext}from\"../App\";import*as Api from\"../api\";import User from\"./user/User\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Portfolio(){var _userState$user;var navigate=useNavigate();var params=useParams();// useState 훅을 통해 portfolioOwner 상태를 생성함.\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),portfolioOwner=_useState2[0],setPortfolioOwner=_useState2[1];// fetchPorfolioOwner 함수가 완료된 이후에만 (isFetchCompleted가 true여야) 컴포넌트가 구현되도록 함.\n// 아래 코드를 보면, isFetchCompleted가 false이면 \"loading...\"만 반환되어서, 화면에 이 로딩 문구만 뜨게 됨.\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isFetchCompleted=_useState4[0],setIsFetchCompleted=_useState4[1];var userState=useContext(UserStateContext);var fetchPorfolioOwner=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(ownerId){var res,ownerData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Api.get(\"users\",ownerId);case 2:res=_context.sent;// 사용자 정보는 response의 data임.\nownerData=res.data;// portfolioOwner을 해당 사용자 정보로 세팅함.\nsetPortfolioOwner(ownerData);// fetchPorfolioOwner 과정이 끝났으므로, isFetchCompleted를 true로 바꿈.\nsetIsFetchCompleted(true);case 6:case\"end\":return _context.stop();}}},_callee);}));return function fetchPorfolioOwner(_x){return _ref.apply(this,arguments);};}();useEffect(function(){// 전역 상태의 user가 null이라면 로그인이 안 된 상태이므로, 로그인 페이지로 돌림.\nif(!userState.user){navigate(\"/login\",{replace:true});return;}if(params.userId){// 만약 현재 URL이 \"/users/:userId\" 라면, 이 userId를 유저 id로 설정함.\nvar ownerId=params.userId;// 해당 유저 id로 fetchPorfolioOwner 함수를 실행함.\nfetchPorfolioOwner(ownerId);}else{// 이외의 경우, 즉 URL이 \"/\" 라면, 전역 상태의 user.id를 유저 id로 설정함.\nvar _ownerId=userState.user.id;// 해당 유저 id로 fetchPorfolioOwner 함수를 실행함.\nfetchPorfolioOwner(_ownerId);}},[params,userState,navigate]);if(!isFetchCompleted){return\"loading...\";}return/*#__PURE__*/_jsx(Container,{fluid:true,children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{md:\"3\",lg:\"3\",children:/*#__PURE__*/_jsx(User,{portfolioOwnerId:portfolioOwner.id,isEditable:portfolioOwner.id===((_userState$user=userState.user)===null||_userState$user===void 0?void 0:_userState$user.id)})}),/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(\"div\",{style:{textAlign:\"center\"},children:\"\\uD559\\uB825 \\uBAA9\\uB85D, \\uC218\\uC0C1\\uC774\\uB825 \\uBAA9\\uB85D, \\uD504\\uB85C\\uC81D\\uD2B8 \\uBAA9\\uB85D, \\uC790\\uACA9\\uC99D \\uBAA9\\uB85D \\uB9CC\\uB4E4\\uAE30\"})})]})});}export default Portfolio;","map":{"version":3,"sources":["/home/elice/react-portfolio-share-app/src/components/Portfolio.js"],"names":["React","useContext","useState","useEffect","useNavigate","useParams","Container","Col","Row","UserStateContext","Api","User","Portfolio","navigate","params","portfolioOwner","setPortfolioOwner","isFetchCompleted","setIsFetchCompleted","userState","fetchPorfolioOwner","ownerId","get","res","ownerData","data","user","replace","userId","id","textAlign"],"mappings":"oXAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,QAA5B,CAAsCC,SAAtC,KAAuD,OAAvD,CACA,OAASC,WAAT,CAAsBC,SAAtB,KAAuC,kBAAvC,CACA,OAASC,SAAT,CAAoBC,GAApB,CAAyBC,GAAzB,KAAoC,iBAApC,CAEA,OAASC,gBAAT,KAAiC,QAAjC,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,QAArB,CACA,MAAOC,CAAAA,IAAP,KAAiB,aAAjB,C,wFAEA,QAASC,CAAAA,SAAT,EAAqB,qBACnB,GAAMC,CAAAA,QAAQ,CAAGT,WAAW,EAA5B,CACA,GAAMU,CAAAA,MAAM,CAAGT,SAAS,EAAxB,CACA;AACA,cAA4CH,QAAQ,CAAC,IAAD,CAApD,wCAAOa,cAAP,eAAuBC,iBAAvB,eACA;AACA;AACA,eAAgDd,QAAQ,CAAC,KAAD,CAAxD,yCAAOe,gBAAP,eAAyBC,mBAAzB,eACA,GAAMC,CAAAA,SAAS,CAAGlB,UAAU,CAACQ,gBAAD,CAA5B,CAEA,GAAMW,CAAAA,kBAAkB,0FAAG,iBAAOC,OAAP,0JAEPX,CAAAA,GAAG,CAACY,GAAJ,CAAQ,OAAR,CAAiBD,OAAjB,CAFO,QAEnBE,GAFmB,eAGzB;AACMC,SAJmB,CAIPD,GAAG,CAACE,IAJG,CAKzB;AACAT,iBAAiB,CAACQ,SAAD,CAAjB,CACA;AACAN,mBAAmB,CAAC,IAAD,CAAnB,CARyB,sDAAH,kBAAlBE,CAAAA,kBAAkB,4CAAxB,CAWAjB,SAAS,CAAC,UAAM,CACd;AACA,GAAI,CAACgB,SAAS,CAACO,IAAf,CAAqB,CACnBb,QAAQ,CAAC,QAAD,CAAW,CAAEc,OAAO,CAAE,IAAX,CAAX,CAAR,CACA,OACD,CAED,GAAIb,MAAM,CAACc,MAAX,CAAmB,CACjB;AACA,GAAMP,CAAAA,OAAO,CAAGP,MAAM,CAACc,MAAvB,CACA;AACAR,kBAAkB,CAACC,OAAD,CAAlB,CACD,CALD,IAKO,CACL;AACA,GAAMA,CAAAA,QAAO,CAAGF,SAAS,CAACO,IAAV,CAAeG,EAA/B,CACA;AACAT,kBAAkB,CAACC,QAAD,CAAlB,CACD,CACF,CAlBQ,CAkBN,CAACP,MAAD,CAASK,SAAT,CAAoBN,QAApB,CAlBM,CAAT,CAoBA,GAAI,CAACI,gBAAL,CAAuB,CACrB,MAAO,YAAP,CACD,CAED,mBACE,KAAC,SAAD,EAAW,KAAK,KAAhB,uBACE,MAAC,GAAD,yBACE,KAAC,GAAD,EAAK,EAAE,CAAC,GAAR,CAAY,EAAE,CAAC,GAAf,uBACE,KAAC,IAAD,EACE,gBAAgB,CAAEF,cAAc,CAACc,EADnC,CAEE,UAAU,CAAEd,cAAc,CAACc,EAAf,qBAAsBV,SAAS,CAACO,IAAhC,0CAAsB,gBAAgBG,EAAtC,CAFd,EADF,EADF,cAOE,KAAC,GAAD,wBAEE,YAAK,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAb,CAAZ,yKAFF,EAPF,GADF,EADF,CAmBD,CAED,cAAelB,CAAAA,SAAf","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Container, Col, Row } from \"react-bootstrap\";\n\nimport { UserStateContext } from \"../App\";\nimport * as Api from \"../api\";\nimport User from \"./user/User\";\n\nfunction Portfolio() {\n  const navigate = useNavigate();\n  const params = useParams();\n  // useState 훅을 통해 portfolioOwner 상태를 생성함.\n  const [portfolioOwner, setPortfolioOwner] = useState(null);\n  // fetchPorfolioOwner 함수가 완료된 이후에만 (isFetchCompleted가 true여야) 컴포넌트가 구현되도록 함.\n  // 아래 코드를 보면, isFetchCompleted가 false이면 \"loading...\"만 반환되어서, 화면에 이 로딩 문구만 뜨게 됨.\n  const [isFetchCompleted, setIsFetchCompleted] = useState(false);\n  const userState = useContext(UserStateContext);\n\n  const fetchPorfolioOwner = async (ownerId) => {\n    // 유저 id를 가지고 \"/users/유저id\" 엔드포인트로 요청해 사용자 정보를 불러옴.\n    const res = await Api.get(\"users\", ownerId);\n    // 사용자 정보는 response의 data임.\n    const ownerData = res.data;\n    // portfolioOwner을 해당 사용자 정보로 세팅함.\n    setPortfolioOwner(ownerData);\n    // fetchPorfolioOwner 과정이 끝났으므로, isFetchCompleted를 true로 바꿈.\n    setIsFetchCompleted(true);\n  };\n\n  useEffect(() => {\n    // 전역 상태의 user가 null이라면 로그인이 안 된 상태이므로, 로그인 페이지로 돌림.\n    if (!userState.user) {\n      navigate(\"/login\", { replace: true });\n      return;\n    }\n\n    if (params.userId) {\n      // 만약 현재 URL이 \"/users/:userId\" 라면, 이 userId를 유저 id로 설정함.\n      const ownerId = params.userId;\n      // 해당 유저 id로 fetchPorfolioOwner 함수를 실행함.\n      fetchPorfolioOwner(ownerId);\n    } else {\n      // 이외의 경우, 즉 URL이 \"/\" 라면, 전역 상태의 user.id를 유저 id로 설정함.\n      const ownerId = userState.user.id;\n      // 해당 유저 id로 fetchPorfolioOwner 함수를 실행함.\n      fetchPorfolioOwner(ownerId);\n    }\n  }, [params, userState, navigate]);\n\n  if (!isFetchCompleted) {\n    return \"loading...\";\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col md=\"3\" lg=\"3\">\n          <User\n            portfolioOwnerId={portfolioOwner.id}\n            isEditable={portfolioOwner.id === userState.user?.id}\n          />\n        </Col>\n        <Col>\n\n          <div style={{ textAlign: \"center\" }}>\n            학력 목록, 수상이력 목록, 프로젝트 목록, 자격증 목록 만들기\n          </div>\n\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Portfolio;\n"]},"metadata":{},"sourceType":"module"}